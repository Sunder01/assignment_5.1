package hadoop;



import org.apache.hadoop.fs.Path; 
import org.apache.hadoop.conf.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; 
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat; 
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; 
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;

public class Task1 {
	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = new Job(conf, "DemoTask1");
		job.setJarByClass(Task1.class);

		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		//job.setNumReduceTasks(0);
		job.setMapperClass(Task1Mapper.class);
		job.setReducerClass(Task1Reducer.class);
		 
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job, new Path(args[0])); 
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		
		/*
		Path out=new Path(args[1]);
		out.getFileSystem(conf).delete(out);
		*/
		
		job.waitForCompletion(true);
	}
}


//Mapper class
package hadoop;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.*; 

public class Task1Mapper extends Mapper<LongWritable, Text, Text, IntWritable> {
	public void map(LongWritable key, Text value, Context context) 
			throws IOException, InterruptedException {
		String[] lineArray = value.toString().split("\t");
		
		int sum = 0;
		if(lineArray[2].equals("MIA")||lineArray[2].equals("MCO"))//problem1
		{
			Text destination = new Text("MIA and MCO");
			sum = Integer.parseInt(lineArray[4])+Integer.parseInt(lineArray[5])+Integer.parseInt(lineArray[6])+Integer.parseInt(lineArray[7])+Integer.parseInt(lineArray[8]);
		context.write(destination,new IntWritable(sum));
		}
		if(lineArray[1].equals("MIA")||lineArray[1].equals("HOU"))//problem2
		{
			sum = 0;
			Text destination = new Text("MIA and HOU");
			sum = Integer.parseInt(lineArray[4])+Integer.parseInt(lineArray[5])+Integer.parseInt(lineArray[6])+Integer.parseInt(lineArray[7])+Integer.parseInt(lineArray[8]);
		context.write(destination,new IntWritable(sum));
		}
		 if(lineArray[2].equals("LAS")||lineArray[2].equals("LAX"))//problem 3
		{
		    if(lineArray[3].equals("1")||lineArray[3].equals("3")||lineArray[3].equals("5")||lineArray[3].equals("7"))	
			{
				sum=0;
				Text destination = new Text("LAS and LAX airway");
				sum = Integer.parseInt(lineArray[4])+Integer.parseInt(lineArray[5])+Integer.parseInt(lineArray[6])+Integer.parseInt(lineArray[7])+Integer.parseInt(lineArray[8]);
			context.write(destination,new IntWritable(sum));
			}
		}
	}
}
//Reducer class
package hadoop;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class Task1Reducer extends Reducer<Text, IntWritable, Text, IntWritable>
{	
	public void reduce(Text key, Iterable<IntWritable> values,Context context) throws IOException, InterruptedException
	{
		int sum = 0;
		
	    	
		for (IntWritable value : values) {
            
			sum = sum + value.get() ;
		}
		

		context.write(key, new IntWritable(sum));
	}
}
